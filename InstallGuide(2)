
##############################
pre-requirement
##############################

#server 3ea
cat << EOF >> /etc/hosts
10.10.64.73 t1vbigdata1 
10.10.64.74 t1vbigdata2 
10.10.64.75 t1vbigdata3 
EOF

#################################
JAVA설치
#################################

yum install -y wget



cd /opt/
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz"

tar xzf jdk-8u131-linux-x64.tar.gz
cd /opt/jdk1.8.0_131/
alternatives --install /usr/bin/java java /opt/jdk1.8.0_131/bin/java 2



alternatives --config java


clear
java -version
export JAVA_HOME=/opt/jdk1.8.0_131
export JRE_HOME=/opt/jdk1.8.0_131/jre
export PATH=$PATH:/opt/jdk1.8.0_131/bin:/opt/jdk1.8.0_131/jre/bin



cat << EOF >> /root/.bash_profile
export JAVA_HOME=/opt/jdk1.8.0_131
export JRE_HOME=/opt/jdk1.8.0_131/jre
export PATH=$PATH:/opt/jdk1.8.0_131/bin:/opt/jdk1.8.0_131/jre/bin
EOF


##############################
download kafka (2018/01/21)
##############################

wget http://apache.mirror.cdnetworks.com/kafka/1.0.0/kafka_2.11-1.0.0.tgz 
tar zxvf kafka_2.11-1.0.0.tgz
cp -r kafka_2.11-1.0.0 /usr/local
ln -s  kafka_2.11-1.0.0  /usr/local/kafka

##############################
Install zookeeper
##############################

cd /usr/local/kafka/config
bk zookeeper.properties

cat << EOF >> zookeeper.properties
initLimit=5
syncLimit=2

server.1=t1vbigdata1:15000:16000
server.2=t1vbigdata2:15000:16000
server.3=t1vbigdata3:15000:16000
EOF

#### HOST-A
mkdir -p /tmp/zookeeper
echo 1 << EOF > /tmp/zookeeper/myid
EOF

#### HOST-B
mkdir -p /tmp/zookeeper
echo 2 << EOF > /tmp/zookeeper/myid
EOF

#### HOST-C
mkdir -p /tmp/zookeeper
echo 3 << EOF > /tmp/zookeeper/myid
EOF

##############################
Run a zookeeper daemon
##############################


### Config startup script

cat << EOF > /usr/local/kafka/zk-start.sh
#!/bin/bash
nohup bin/zookeeper-server-start.sh -daemon config/zookeeper.properties 
EOF

### Config stop script

cat << EOF > /usr/local/kafka/zk-stop.sh
#!/bin/bash
/usr/local/kafka/bin/zookeeper-server-stop.sh
EOF

chmod 755 /usr/local/kafka/zk-start.sh
chmod 755 /usr/local/kafka/zk-stop.sh


###########################
Disabled&Stop FirewallD
###########################

systemctl disable firewalld
systemctl stop firewalld


##### running on foreground

cd /usr/local/kafka/
bin/zookeeper-server-start.sh config/zookeeper.properties

##### running on background
/usr/local/kafka/zk-start.sh

/usr/local/kafka/zk-stop.sh


###########################
Setup kafka cluster
###########################

cd /usr/local/kafka/config
bk server.properties

vi /usr/local/kafka/config/server.properties
--------------------------------------------------------------------------------
1) broker.id를 주키퍼의 id와 동일하게 설정한다

2) 주키퍼연결 수정
zookeeper.connect=localhost:2181
—> 
zookeeper.connect=t1vbigdata1:2181,t1vbigdata2:2181,t1vbigdata3:2181
--------------------------------------------------------------------------------

cd /usr/local/kafka

cat << EOF > /usr/local/kafka/kafka-start.sh
#!/bin/bash
/usr/local/kafka/bin/kafka-server-start.sh -daemon /usr/local/kafka/config/server.properties
EOF

cat << EOF > /usr/local/kafka/kafka-stop.sh
#!/bin/bash
/usr/local/kafka/bin/kafka-server-stop.sh -daemon /usr/local/kafka/config/server.properties
EOF

chmod 755 /usr/local/kafka/kafka-start.sh
chmod 755 /usr/local/kafka/kafka-stop.sh


/usr/local/kafka/kafka-start.sh

tail -f /usr/local/kafka/logs/kafkaServer.out


##############################
# check the kafka
##############################
각 서버에 카프카 id별로 stared 되어있으면 정상이므로, 주키퍼->카프카 순서대로 종료함
kafkaServer id=1] started (kafka.server.KafKaServer)
kafkaServer id=2] started (kafka.server.KafKaServer)
kafkaServer id=3] started (kafka.server.KafKaServer)

##주키퍼실행/종료
/usr/local/kafka/zk-start.sh
tail -f /usr/local/kafka/logs/zookeeper.out

/usr/local/kafka/zk-stop.sh
tail -f /usr/local/kafka/logs/zookeeper.out

##카프카실행/종료
/usr/local/kafka/kafka-start.sh
tail -f /usr/local/kafka/logs/kafkaServer.out

/usr/local/kafka/kafka-stop.sh
tail -f /usr/local/kafka/logs/kafkaServer.out


##############################
# Create a topic and browsing
##############################

/usr/local/kafka/bin/kafka-topics.sh --create --zookeeper t1vbigdata1 --replication-factor 3 --partitions 1 --topic test
>>Created topic "test"

/usr/local/kafka/bin/kafka-topics.sh --list --zookeeper t1vbigdata1
>>test

/usr/local/kafka/bin/kafka-topics.sh --alter --zookeeper t1vbigdata1 --topic test --partitions 2
>>WARNING: If partitions are increased for a topic that has a key, the partition logic or ordering of the messages will be affected
>>Adding partitions succeeded!

/usr/local/kafka/bin/kafka-topics.sh --describe --zookeeper t1vbigdata1 --topic test

##############################
# Producer/Consumer
##############################
2개의 터미널

#Producer
/usr/local/kafka/bin/kafka-console-producer.sh --broker-list t1vbigdata1:9092 --topic test

#Consumer
/usr/local/kafka/bin/kafka-console-consumer.sh --zookeeper t1vbigdata1 --topic test --from-beginning

/usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server t1vbigdata1:9092 --topic test --from-beginning


디폴트로 토픽을 삭제 할 수 없음
/usr/local/kafka/bin/kafka-topics.sh --delete --zookeeper t1vbigdata1 --topic test
>>Topic test is marked for deletion.
>>Note: This will have no impact if delete.topic.enable is not set to true.

설정파일에 삭제 enable 후 kafka 재기동하여 반영

cat << EOF >> /usr/local/kafka/config/server.properties
delete.topic.enable=true
EOF


/usr/local/kafka/kafka-stop.sh
tail -f /usr/local/kafka/logs/kafkaServer.out

/usr/local/kafka/kafka-start.sh
tail -f /usr/local/kafka/logs/kafkaServer.out



##############################
# 테스트
##############################

#토픽리스트
/usr/local/kafka/bin/kafka-topics.sh --list --zookeeper t1vbigdata1

#토픽생성 후 확인(describe)
/usr/local/kafka/bin/kafka-topics.sh --create --zookeeper t1vbigdata1 --replication-factor 3 --partitions 1 --topic test
/usr/local/kafka/bin/kafka-topics.sh --describe --zookeeper t1vbigdata1 --topic test

#토픽수정(파티션1개->2개) 후 확인(describe)
/usr/local/kafka/bin/kafka-topics.sh --alter --zookeeper t1vbigdata1 --topic test --partitions 2
/usr/local/kafka/bin/kafka-topics.sh --describe --zookeeper t1vbigdata1 --topic test

#토픽리스트
/usr/local/kafka/bin/kafka-topics.sh --list --zookeeper t1vbigdata1

#프로듀서
/usr/local/kafka/bin/kafka-console-producer.sh --broker-list t1vbigdata1:9092 --topic test

#컨슈머
/usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server t1vbigdata1:9092 --topic test --from-beginning

#토픽삭제
/usr/local/kafka/bin/kafka-topics.sh --delete --zookeeper t1vbigdata1 --topic test

#토픽리스트
/usr/local/kafka/bin/kafka-topics.sh --list --zookeeper t1vbigdata1









